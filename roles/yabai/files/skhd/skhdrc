# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimiter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimiter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.


# ----------------------------------------
#      Navigate
#        cmd + { h,j,k,l }
# ----------------------------------------
cmd - h : yabai -m window --focus west || yabai -m display --focus west
cmd - j : yabai -m window --focus south || yabai -m display --focus south
cmd - k : yabai -m window --focus north || yabai -m display --focus north
cmd - l : yabai -m window --focus east || yabai -m display --focus east



# ----------------------------------------
#      Move
#        cmd + shift + { h,j,k,l }
# ----------------------------------------
shift + cmd - h : yabai -m window --warp west || $(yabai -m window --display west && sketchybar --trigger windows_on_spaces && yabai -m display --focus west && yabai -m window --warp last) || yabai -m window --move rel:-10:0
shift + cmd - j : yabai -m window --warp south || $(yabai -m window --display south && sketchybar --trigger windows_on_spaces && yabai -m display --focus south) || yabai -m window --move rel:0:10
shift + cmd - k : yabai -m window --warp north || $(yabai -m window --display north && sketchybar --trigger windows_on_spaces && yabai -m display --focus north) || yabai -m window --move rel:0:-10
shift + cmd - l : yabai -m window --warp east || $(yabai -m window --display east && sketchybar --trigger windows_on_spaces && yabai -m display --focus east && yabai -m window --warp first) || yabai -m window --move rel:10:0



# ----------------------------------------
#      Swap
#        alt + shift + { h,j,k,l }
# ----------------------------------------
#   (options: north, east, south, west)
alt + shift - h : yabai -m window --swap west  || $(yabai -m window --display west; yabai -m display --focus west)
alt + shift - j : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
alt + shift - k : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
alt + shift - l : yabai -m window --swap east  || $(yabai -m window --display east; yabai -m display --focus east)



# ----------------------------------------
#      Move Workspace
#        alt + shift + { 1,2,3,4,5 }
# ----------------------------------------
shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5



# ----------------------------------------
#      Resize
#        cmd + shift + { ←,↑,↓,→ }
# ----------------------------------------
cmd + shift - left : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
cmd + shift - down : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
cmd + shift - up : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
cmd + shift - right : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0



# ----------------------------------------
#      Utilities
#        alt + { s,v }
# ----------------------------------------
# Float / Unfloat window: alt - space
cmd + shift - space : yabai -m window --toggle float; sketchybar --trigger window_focus

# Make window zoom to fullscreen: shift + alt - f
cmd + shift - f : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# Toggle split orientation of the selected windows node: shift + alt - s
cmd + shift - s : yabai -m window --toggle split

# open apps
shift + cmd - b : open -na /Applications/Firefox Developer Edition.app
shift + cmd - t : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~
shift + cmd - m : open -na /Applications/spotify.app
